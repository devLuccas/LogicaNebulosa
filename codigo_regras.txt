async function defuzzyfication(distance, space)
{
    const{a, b , c, d} = getPercent();

    if(MAPPER[distance.right] === MAPPER.far)
    {
        return [ROBO[0] + 0, ROBO[1] + space.right];
    }else
    {
        if(MAPPER[distance.right] = MAPPER.medium)
        {
            if(space.right = b)
            {
                return [ROBO[0], ROBO[1] + b];
            } else
            {
                if(space.right > b && space.right < c)
                {
                    return [ROBO[0], ROBO[1] + space.right];
                } else
                {
                    return [ROBO[0], ROBO[1] + c];
                }
            }
        }else
        {
            if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.far)
            {
                if(space.right = a)
                {
                    return [ROBO[0], ROBO[1] + a];
                } else
                {
                    return [ROBO[0] + d, ROBO[1]];
                }
            }else
            {
                if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.medium)
                {
                    if(space.right = a)
                    {
                        return [ROBO[0], ROBO[1] + a];
                    }else
                    {
                        if(space.bottom = b)
                        {
                            return [ROBO[0] + b, ROBO[1]];
                        }else
                        {
                            if(space.bottom > b && space.bottom < c)
                            {
                                return [ROBO[0] + space.bottom, ROBO[1]];
                            }else
                            {
                                return [ROBO[0] + c, ROBO[1]];
                            }
                        }
                    }
                }else{
                    if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.close && MAPPER[distance.left] === MAPPER.far)
                    {
                        if(space.right = a)
                        {
                            return [ROBO[0], ROBO[1] + a];
                        } else{
                            if(space.bottom = a)
                            {
                                return [ROBO[0] + a, ROBO[1]];
                            } else
                            {
                                return [ROBO[0], ROBO[1] - b]; //O ROBO NÃO IRÁ RETORNAR TODOS OS ESPAÇOS DISPONIVEIS
                            }
                        }
                    }else{
                        if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.close && MAPPER[distance.left] === MAPEPR.medium)
                        {
                            if(space.right = a)
                            {
                                return [ROBO[0], ROBO[1] + a];
                            } else
                            {
                                if(space.bottom = a)
                                {
                                    return [ROBO[0] + a, ROBO[1]];
                                } else
                                {
                                    if(space.left = b || space.left > b && space.left < c)
                                    {
                                        return [ROBO[0], ROBO[1] - b];//O ROBO NÃO IRÁ RETORNAR TODOS OS ESPAÇOS DISPONIVEIS
                                    } 
                                }
                            }
                        }else
                        {
                            if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.close && MAPPER[distance.left] === MAPEPR.close && MAPPER[distance.top] === MAPPER.far)
                            {
                            if(space.right = a)
                            {
                                return [ROBO[0], ROBO[1] + a];
                            } else
                            {
                                if(space.bottom = a)
                                {
                                    return [ROBO[0] + a, ROBO[1]];
                                } else
                                {
                                    if(space.left = a)
                                    {
                                        return [ROBO[0], ROBO[1] - a]
                                    } else
                                    {
                                        return [ROBO[0] - b, ROBO[1]]
                                    }
                                }
                            }
                            }else
                            {
                                if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.close && MAPPER[distance.left] === MAPEPR.close && MAPPER[distance.top] === MAPPER.medium)
                                {
                                    if(space.right = a){
                                        return [ROBO[0], ROBO[1] + a];
                                    }else
                                    {
                                        if(space.bottom = a)
                                        {
                                            return [ROBO[0] + a, ROBO[1]];
                                        }else
                                        {
                                            if(space.left = a)
                                            {
                                                return [ROBO[0], ROBO[1] - a]
                                            } else
                                            {
                                                if(space.top = b || space.top>b && space.top<c)
                                                {
                                                    return [ROBO[0] - b, ROBO[1]];
                                                }
                                            }
                                        }
                                    }
                                }else
                                {
                                    if(MAPPER[distance.right] === MAPPER.close && MAPPER[distance.bottom] === MAPPER.close && MAPPER[distance.left] === MAPEPR.close && MAPPER[distance.top] === MAPPER.medium)
                                    {
                                        if(space.right = a)
                                        {
                                            return [ROBO[0], ROBO[1] + a];
                                        }else
                                        {
                                            if(space.bottom = a)
                                            {
                                                return [ROBO[0] + a, ROBO[1]];
                                            } else
                                            {
                                                if(space.left = a)
                                                {
                                                    return [ROBO[0], ROBO[1] - a]
                                                } else
                                                {
                                                    if(space.top = a)
                                                    {
                                                        return [ROBO[0] - a, ROBO[1]];
                                                    }
                                                }
                                            }
                                        }                     
                                    }else{
                                        console.log('VOCÊ ESTÁ PRESO!');
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    console.log('distances', distance);
}